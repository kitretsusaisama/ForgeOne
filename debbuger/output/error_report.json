{
  "summary": {
    "total_errors": 106,
    "total_warnings": 0,
    "total_notes": 0,
    "files_with_errors": 13,
    "unique_error_types": 15,
    "error_categories": {
      "General": 72,
      "Module System": 25,
      "Undefined Item": 2,
      "Privacy Violation": 2,
      "Type Mismatch": 3,
      "Trait Bound": 1
    },
    "processing_time_seconds": 0.2763044834136963
  },
  "errors_by_file": {
    "microkernel\\src\\lib.rs": [
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "27",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `observer`",
        "help": "to create the module `observer`, create file \n\"microkernel\\src\\observer.rs\" or \"microkernel\\src\\observer\\mod.rs\"",
        "rust_suggestion": "to create the module `observer`, create file \n\"microkernel\\src\\observer.rs\" or \"microkernel\\src\\observer\\mod.rs\"",
        "code_snippet": "27: pub mod observer;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "28",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `crypto`",
        "help": "to create the module `crypto`, create file \n\"microkernel\\src\\crypto.rs\" or \"microkernel\\src\\crypto\\mod.rs\"",
        "rust_suggestion": "to create the module `crypto`, create file \n\"microkernel\\src\\crypto.rs\" or \"microkernel\\src\\crypto\\mod.rs\"",
        "code_snippet": "28: pub mod crypto;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "29",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `diagnostics`",
        "help": "to create the module `diagnostics`, create file \n\"microkernel\\src\\diagnostics.rs\" or \"microkernel\\src\\diagnostics\\mod.rs\"",
        "rust_suggestion": "to create the module `diagnostics`, create file \n\"microkernel\\src\\diagnostics.rs\" or \"microkernel\\src\\diagnostics\\mod.rs\"",
        "code_snippet": "29: pub mod diagnostics;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "30",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `interface`",
        "help": "to create the module `interface`, create file \n\"microkernel\\src\\interface.rs\" or \"microkernel\\src\\interface\\mod.rs\"",
        "rust_suggestion": "to create the module `interface`, create file \n\"microkernel\\src\\interface.rs\" or \"microkernel\\src\\interface\\mod.rs\"",
        "code_snippet": "30: pub mod interface;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "31",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `config`",
        "help": "to create the module `config`, create file \n\"microkernel\\src\\config.rs\" or \"microkernel\\src\\config\\mod.rs\"",
        "rust_suggestion": "to create the module `config`, create file \n\"microkernel\\src\\config.rs\" or \"microkernel\\src\\config\\mod.rs\"",
        "code_snippet": "31: pub mod config;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "99",
        "column": "43",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: could not find `container` in `execution`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "99: let container_id = \nexecution::container::get_current_container_id()",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "124",
        "column": "25",
        "level": "error",
        "code": "E0603",
        "message": "function `execute_syscall` is private",
        "help": "`#[warn(unused_imports)]` on by default\n\nwarning: ambiguous glob re-exports\n  --> microkernel\\src\\core\\mod.rs:11:9\n   |\n11 | pub use boot::*;\n   |         ^^^^^^^ the name `init` in the value namespace is first \nre-exported here\n12 | pub use runtime::*;\n13 | pub use scheduler::*;\n   |         ------------ but the name `init` in the value namespace is also \nre-exported here\n   |",
        "rust_suggestion": "`#[warn(unused_imports)]` on by default\n\nwarning: ambiguous glob re-exports\n  --> microkernel\\src\\core\\mod.rs:11:9\n   |\n11 | pub use boot::*;\n   |         ^^^^^^^ the name `init` in the value namespace is first \nre-exported here\n12 | pub use runtime::*;\n13 | pub use scheduler::*;\n   |         ------------ but the name `init` in the value namespace is also \nre-exported here\n   |",
        "code_snippet": "124: execution::syscall::execute_syscall(syscall, args, identity, &mut \nspan)\n170: fn execute_syscall(syscall: &str, args: &[&str]) -> Result<()> {\n8: use common::error::{ForgeError, Result};\n11: pub use boot::*;\n12: pub use runtime::*;\n13: pub use scheduler::*;\n11: pub use boot::*;\n12: pub use runtime::*;\n13: pub use scheduler::*;\n11: pub use boot::*;\n12: pub use runtime::*;\n13: pub use scheduler::*;\n12: pub use runtime::*;\n13: pub use scheduler::*;\n14: use wasmtime::{Engine, Module, Store, Instance, Linker};\n6: use std::collections::HashMap;\n10: use uuid::Uuid;\n9: use uuid::Uuid;\n11: use crate::execution::syscall::{SyscallContext, SyscallResult};",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "58",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "75",
        "column": "34",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `TrustViolation` found for \nenum `ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "75: .map_err(|e| ForgeError::TrustViolation(e))?;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "82",
        "column": "36",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `TrustViolation` found for \nenum `ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "82: return Err(ForgeError::TrustViolation(format!(\"Syscall '{}' \nblocked by ZTA policy\", syscall)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "90",
        "column": "17",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallTrace` has no field named `id`",
        "help": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "rust_suggestion": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "code_snippet": "90: id: uuid::Uuid::new_v4(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "91",
        "column": "17",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallTrace` has no field named `syscall_name`",
        "help": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "rust_suggestion": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "code_snippet": "91: syscall_name: syscall.to_string(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "95",
        "column": "17",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallTrace` has no field named `result`",
        "help": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "rust_suggestion": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "code_snippet": "95: result: \"QUARANTINED\".to_string(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "100",
        "column": "30",
        "level": "error",
        "code": "E0533",
        "message": "expected value, found struct variant `ForgeError::ExecutionError`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "100: .map_err(|e| ForgeError::ExecutionError(e))?;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "107",
        "column": "39",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `TrustViolation` found for \nenum `ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "107: ).map_err(|e| ForgeError::TrustViolation(e))?;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "109",
        "column": "36",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `TrustViolation` found for \nenum `ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "109: return Err(ForgeError::TrustViolation(format!(\"Process \nquarantined due to syscall '{}' violation\", syscall)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "124",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this function takes 2 arguments but 4 arguments were supplied",
        "help": "`#[warn(unused_variables)]` on by default\n\nwarning: unused variable: `state`\n   --> microkernel\\src\\execution\\wasm.rs:164:13\n    |\n164 |     let mut state = WasmHostState::Running;\n    |             ^^^^^ help: if this is intentional, prefix it with an \nunderscore: `_state`\n\nwarning: variable does not need to be mutable\n   --> microkernel\\src\\execution\\wasm.rs:164:9\n    |\n164 |     let mut state = WasmHostState::Running;\n    |         ----^^^^^\n    |         |\n    |         help: remove this `mut`\n    |",
        "rust_suggestion": "`#[warn(unused_variables)]` on by default\n\nwarning: unused variable: `state`\n   --> microkernel\\src\\execution\\wasm.rs:164:13\n    |\n164 |     let mut state = WasmHostState::Running;\n    |             ^^^^^ help: if this is intentional, prefix it with an \nunderscore: `_state`\n\nwarning: variable does not need to be mutable\n   --> microkernel\\src\\execution\\wasm.rs:164:9\n    |\n164 |     let mut state = WasmHostState::Running;\n    |         ----^^^^^\n    |         |\n    |         help: remove this `mut`\n    |",
        "code_snippet": "124: execution::syscall::execute_syscall(syscall, args, identity, &mut \nspan)\n170: fn execute_syscall(syscall: &str, args: &[&str]) -> Result<()> {\n249: let runtime_context = get_runtime_context()?;\n164: let mut state = WasmHostState::Running;\n164: let mut state = WasmHostState::Running;\n199: fn execute_file_open(args: &[&str]) -> Result<()> {\n204: fn execute_file_read(args: &[&str]) -> Result<()> {\n209: fn execute_file_write(args: &[&str]) -> Result<()> {\n214: fn execute_file_close(args: &[&str]) -> Result<()> {\n219: fn execute_net_connect(args: &[&str]) -> Result<()> {\n224: fn execute_net_send(args: &[&str]) -> Result<()> {\n229: fn execute_net_recv(args: &[&str]) -> Result<()> {\n234: fn execute_net_close(args: &[&str]) -> Result<()> {\n239: fn execute_proc_create(args: &[&str]) -> Result<()> {\n244: fn execute_proc_kill(args: &[&str]) -> Result<()> {\n249: fn execute_mem_alloc(args: &[&str]) -> Result<()> {\n254: fn execute_mem_free(args: &[&str]) -> Result<()> {\n259: fn execute_ipc_send(args: &[&str]) -> Result<()> {\n264: fn execute_ipc_recv(args: &[&str]) -> Result<()> {\n269: fn execute_time_get(args: &[&str]) -> Result<()> {\n274: fn execute_time_sleep(args: &[&str]) -> Result<()> {\n279: fn execute_crypto_hash(args: &[&str]) -> Result<()> {\n284: fn execute_crypto_sign(args: &[&str]) -> Result<()> {\n289: fn execute_crypto_verify(args: &[&str]) -> Result<()> {\n294: fn execute_sys_info(args: &[&str]) -> Result<()> {\n315: fn calculate_behavioral_score(&self, context_id: Uuid) -> f64 {\n322: fn calculate_environmental_score(&self, context_id: Uuid) -> f64 {\n329: fn calculate_policy_adjustments(&self, context_id: Uuid) -> f64 {\n386: let context = self.get_context(context_id)?;\n383: trust_score: f64,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "microkernel\\src\\trust\\attestation.rs": [
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "13",
        "column": "22",
        "level": "error",
        "code": "E0432",
        "message": "unresolved imports `common::crypto::Hash`, \n`common::crypto::PublicKey`",
        "help": "consider importing one of these items instead:\n           std::hash::Hash\n           common::db::IndexType::Hash",
        "rust_suggestion": "consider importing one of these items instead:\n           std::hash::Hash\n           common::db::IndexType::Hash",
        "code_snippet": "13: use common::crypto::{Hash, Signature, PublicKey};",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "150",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "150: log::info!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "226",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "226: log::info!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "340",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "340: log::info!(\"Trusted key added: {}\", key_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "356",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "356: log::info!(\"Trusted key removed: {}\", key_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "13",
        "column": "28",
        "level": "error",
        "code": "E0603",
        "message": "struct `Signature` is private",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "13: use common::crypto::{Hash, Signature, PublicKey};\n21: use ed25519_dalek::{SigningKey, VerifyingKey, Signature, Signer, \nVerifier};\n13: use common::crypto::{Hash, ed25519::Signature, PublicKey};",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "microkernel\\src\\execution\\syscall.rs": [
      {
        "file": "microkernel\\src\\execution\\syscall.rs",
        "line": "10",
        "column": "5",
        "level": "error",
        "code": "E0432",
        "message": "unresolved import `crate::trust::zta_policy::PolicyGraph`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "10: use crate::trust::zta_policy::PolicyGraph;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\syscall.rs",
        "line": "101",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Trust` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "101: return Err(ForgeError::Trust(format!(\"Syscall {} denied by ZTA \npolicy\", syscall)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\syscall.rs",
        "line": "150",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "150: Err(ForgeError::Execution(format!(\"Unknown syscall type: {}\", \nsyscall)))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\syscall.rs",
        "line": "193",
        "column": "30",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "193: _ => Err(ForgeError::Execution(format!(\"Unknown syscall: {}\", \nsyscall))),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "microkernel\\src\\trust\\syscall_enforcer.rs": [
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "78",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "78: log::warn!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "151",
        "column": "26",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "151: &context.syscall,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "162",
        "column": "54",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "162: let policy = \ngraph.policies.get(&context.syscall).unwrap_or_else(|| {",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "163",
        "column": "68",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "163: panic!(\"Policy not found for syscall: {}\", \ncontext.syscall)",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "209",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `syscall`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "209: syscall: syscall.to_string(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "212",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `execution_dna`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "212: execution_dna: None,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "213",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `timestamp`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "213: timestamp: Utc::now(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "microkernel\\src\\trust\\redzone.rs": [
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "185",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "185: log::warn!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "208",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "208: log::info!(\"Applying full isolation to process {}\", \nprocess_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "213",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "213: log::info!(\"Applying network isolation to process {}\", \nprocess_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "218",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "218: log::info!(\"Applying filesystem isolation to process \n{}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "223",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "223: log::info!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "248",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "248: log::info!(\"No forensic data collection for process {}\", \nprocess_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "252",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "252: log::info!(\"Collecting metadata for process {}\", \nprocess_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "257",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "257: log::info!(\"Collecting full forensic data for process \n{}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "283",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "283: log::info!(\"Analyzing quarantined process {}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "309",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "309: log::info!(\"Terminating quarantined process {}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "326",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "326: log::info!(\"Recovering quarantined process {}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "346",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "346: log::info!(\"Removed process {} from quarantine\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "microkernel\\src\\trust\\evaluation.rs": [
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "147",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "147: log::info!(\"Trust evaluation context created: {}\", context_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "191",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "191: log::info!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "418",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "418: log::info!(\"Trust threshold set: {} = {}\", name, threshold);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "238",
        "column": "13",
        "level": "error",
        "code": "E0532",
        "message": "expected unit struct, unit variant or constant, found tuple \nvariant `TrustVector::Signed`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "238: TrustVector::Signed => 0.8,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "117",
        "column": "52",
        "level": "error",
        "code": "E0599",
        "message": "no function or associated item named `new` found for struct \n`zta_policy::ZtaPolicyGraph` in the current scope",
        "help": "items from traits can only be used if the trait is implemented and \nin scope",
        "rust_suggestion": "items from traits can only be used if the trait is implemented and \nin scope",
        "code_snippet": "117: let policy_graph = ZtaPolicyGraph::new();",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "249",
        "column": "29",
        "level": "error",
        "code": "E0599",
        "message": "no method named `is_some` found for struct `std::string::String` \nin the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "249: if identity.user_id.is_some() {",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "274",
        "column": "36",
        "level": "error",
        "code": "E0689",
        "message": "can't call method `min` on ambiguous numeric type `{float}`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "274: (base_score + adjustments).min(1.0).max(0.0)",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "369",
        "column": "13",
        "level": "error",
        "code": "E0308",
        "message": "mismatched types",
        "help": "expected enum `common::identity::TrustVector`\n            found enum constructor `fn(std::string::String) -> \ncommon::identity::TrustVector {Signed}`\nhelp: use parentheses to construct this tuple variant\n    |\n369 |             TrustVector::Signed(/* std::string::String */)\n    |                                +++++++++++++++++++++++++++",
        "rust_suggestion": "expected enum `common::identity::TrustVector`\n            found enum constructor `fn(std::string::String) -> \ncommon::identity::TrustVector {Signed}`\nhelp: use parentheses to construct this tuple variant\n    |\n369 |             TrustVector::Signed(/* std::string::String */)\n    |                                +++++++++++++++++++++++++++",
        "code_snippet": "357: fn determine_trust_vector(&self, trust_score: f64, context: \n&TrustEvaluationContext) -> TrustVector {\n369: TrustVector::Signed\n369: TrustVector::Signed(/* std::string::String */)",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "microkernel\\src\\trust\\mod.rs": [
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "39",
        "column": "5",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "39: log::info!(\"Trust module initialized\");",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "47",
        "column": "5",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "47: log::info!(\"Trust module shutdown\");",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "28",
        "column": "23",
        "level": "error",
        "code": "E0425",
        "message": "cannot find function `init` in module `syscall_enforcer`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "28: syscall_enforcer::init(policy_graph.clone())?;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "59",
        "column": "38",
        "level": "error",
        "code": "E0425",
        "message": "cannot find function `get_syscall_enforcer` in module \n`syscall_enforcer`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "59: let enforcer = syscall_enforcer::get_syscall_enforcer();",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "37",
        "column": "22",
        "level": "error",
        "code": "E0308",
        "message": "mismatched types",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "37: evaluation::init(policy_graph)?;\n85: pub fn init(policy_graph: ZtaPolicyGraph) -> Result<(), String> {",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "microkernel\\src\\core\\boot.rs": [
      {
        "file": "microkernel\\src\\core\\boot.rs",
        "line": "81",
        "column": "20",
        "level": "error",
        "code": "E0308",
        "message": "arguments to this function are incorrect",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "81: let identity = IdentityContext::new(\"system\", \"boot\");\n51: pub fn new(tenant_id: String, user_id: String) -> Self {\n81: let identity = IdentityContext::new(\"system\".to_string(), \"boot\");\n81: let identity = IdentityContext::new(\"system\", \"boot\".to_string());",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\boot.rs",
        "line": "158",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "158: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n158: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "microkernel\\src\\core\\runtime.rs": [
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "171",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "171: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n171: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "205",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "205: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n205: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "235",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "235: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n235: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "242",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "242: ForgeError::Runtime(\"Runtime context not \ninitialized\".to_string())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "297",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "297: ForgeError::Runtime(format!(\"Container {} not found\", \ncontainer_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "312",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "312: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n312: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "323",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "323: ForgeError::Runtime(format!(\"Container {} not found\", \ncontainer_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "357",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "357: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n357: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "366",
        "column": "21",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "366: ForgeError::Runtime(format!(\"Container {} not found\", \ncontainer_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "microkernel\\src\\core\\scheduler.rs": [
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "116",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "116: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n116: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "156",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "156: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n156: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "184",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "184: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n184: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "191",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "191: ForgeError::Runtime(\"Scheduler context not \ninitialized\".to_string())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "220",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "220: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n220: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "243",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "243: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n243: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "microkernel\\src\\execution\\wasm.rs": [
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "57",
        "column": "5",
        "level": "error",
        "code": "E0277",
        "message": "`Module` doesn't implement `std::fmt::Debug`",
        "help": "the trait `std::fmt::Debug` is not implemented for `Module`",
        "rust_suggestion": "the trait `std::fmt::Debug` is not implemented for `Module`",
        "code_snippet": "37: #[derive(Debug)]\n57: pub wasmtime_module: Option<wasmtime::Module>,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "191",
        "column": "21",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "191: ForgeError::Execution(format!(\"Failed to read module file: {}\", \ne))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "195",
        "column": "48",
        "level": "error",
        "code": "E0599",
        "message": "no function or associated item named `digest` found for struct \n`CoreWrapper` in the current scope",
        "help": "items from traits can only be used if the trait is in scope\nhelp: trait `Digest` which provides `digest` is implemented but not in scope; \nperhaps you want to import it\n    |\n6   + use sha3::Digest;\n    |",
        "rust_suggestion": "items from traits can only be used if the trait is in scope\nhelp: trait `Digest` which provides `digest` is implemented but not in scope; \nperhaps you want to import it\n    |\n6   + use sha3::Digest;\n    |",
        "code_snippet": "195: let hash = format!(\"{:x}\", sha3::Sha3_256::digest(&module_bytes));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "218",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "218: ForgeError::Execution(format!(\"Failed to compile module: \n{}\", e))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "282",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "282: ForgeError::Execution(format!(\"Module {} not found\", \nmodule_name))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "332",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "332: ForgeError::Execution(format!(\"Instance {} not found\", \ninstance_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "338",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "338: return Err(ForgeError::Execution(format!(\"Function {} not found \nin instance {}\", function_name, instance_id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "369",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "369: ForgeError::Execution(format!(\"Instance {} not found\", \ninstance_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "382",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "382: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n382: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "microkernel\\src\\execution\\sandbox.rs": [
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "175",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "175: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to start\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "210",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "210: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to stop\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "248",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "248: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to pause\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "283",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "283: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to resume\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "322",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "322: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to execute commands\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "microkernel\\src\\trust\\zta_policy.rs": [
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "258",
        "column": "55",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "258: let policy = match self.policies.get(&context.syscall) {",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "263",
        "column": "85",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "263: reason: Some(format!(\"No policy found for syscall: \n{}\", context.syscall)),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "299",
        "column": "71",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "299: Some(patterns) => patterns.iter().any(|p| \ncontext.syscall.contains(p)),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "397",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `syscall`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "397: syscall: syscall.to_string(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "400",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `execution_dna`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "400: execution_dna: None,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "401",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `timestamp`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "401: timestamp: Utc::now(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "46",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "49",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "52",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "57",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "60",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "63",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "69",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "72",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "75",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ]
  },
  "errors_by_type": {
    "E0583": [
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "27",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `observer`",
        "help": "to create the module `observer`, create file \n\"microkernel\\src\\observer.rs\" or \"microkernel\\src\\observer\\mod.rs\"",
        "rust_suggestion": "to create the module `observer`, create file \n\"microkernel\\src\\observer.rs\" or \"microkernel\\src\\observer\\mod.rs\"",
        "code_snippet": "27: pub mod observer;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "28",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `crypto`",
        "help": "to create the module `crypto`, create file \n\"microkernel\\src\\crypto.rs\" or \"microkernel\\src\\crypto\\mod.rs\"",
        "rust_suggestion": "to create the module `crypto`, create file \n\"microkernel\\src\\crypto.rs\" or \"microkernel\\src\\crypto\\mod.rs\"",
        "code_snippet": "28: pub mod crypto;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "29",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `diagnostics`",
        "help": "to create the module `diagnostics`, create file \n\"microkernel\\src\\diagnostics.rs\" or \"microkernel\\src\\diagnostics\\mod.rs\"",
        "rust_suggestion": "to create the module `diagnostics`, create file \n\"microkernel\\src\\diagnostics.rs\" or \"microkernel\\src\\diagnostics\\mod.rs\"",
        "code_snippet": "29: pub mod diagnostics;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "30",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `interface`",
        "help": "to create the module `interface`, create file \n\"microkernel\\src\\interface.rs\" or \"microkernel\\src\\interface\\mod.rs\"",
        "rust_suggestion": "to create the module `interface`, create file \n\"microkernel\\src\\interface.rs\" or \"microkernel\\src\\interface\\mod.rs\"",
        "code_snippet": "30: pub mod interface;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "31",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `config`",
        "help": "to create the module `config`, create file \n\"microkernel\\src\\config.rs\" or \"microkernel\\src\\config\\mod.rs\"",
        "rust_suggestion": "to create the module `config`, create file \n\"microkernel\\src\\config.rs\" or \"microkernel\\src\\config\\mod.rs\"",
        "code_snippet": "31: pub mod config;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "E0432": [
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "13",
        "column": "22",
        "level": "error",
        "code": "E0432",
        "message": "unresolved imports `common::crypto::Hash`, \n`common::crypto::PublicKey`",
        "help": "consider importing one of these items instead:\n           std::hash::Hash\n           common::db::IndexType::Hash",
        "rust_suggestion": "consider importing one of these items instead:\n           std::hash::Hash\n           common::db::IndexType::Hash",
        "code_snippet": "13: use common::crypto::{Hash, Signature, PublicKey};",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\syscall.rs",
        "line": "10",
        "column": "5",
        "level": "error",
        "code": "E0432",
        "message": "unresolved import `crate::trust::zta_policy::PolicyGraph`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "10: use crate::trust::zta_policy::PolicyGraph;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "E0433": [
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "78",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "78: log::warn!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "185",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "185: log::warn!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "208",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "208: log::info!(\"Applying full isolation to process {}\", \nprocess_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "213",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "213: log::info!(\"Applying network isolation to process {}\", \nprocess_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "218",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "218: log::info!(\"Applying filesystem isolation to process \n{}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "223",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "223: log::info!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "248",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "248: log::info!(\"No forensic data collection for process {}\", \nprocess_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "252",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "252: log::info!(\"Collecting metadata for process {}\", \nprocess_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "257",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "257: log::info!(\"Collecting full forensic data for process \n{}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "283",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "283: log::info!(\"Analyzing quarantined process {}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "309",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "309: log::info!(\"Terminating quarantined process {}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "326",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "326: log::info!(\"Recovering quarantined process {}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "346",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "346: log::info!(\"Removed process {} from quarantine\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "150",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "150: log::info!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "226",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "226: log::info!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "340",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "340: log::info!(\"Trusted key added: {}\", key_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "356",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "356: log::info!(\"Trusted key removed: {}\", key_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "147",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "147: log::info!(\"Trust evaluation context created: {}\", context_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "191",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "191: log::info!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "418",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "418: log::info!(\"Trust threshold set: {} = {}\", name, threshold);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "39",
        "column": "5",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "39: log::info!(\"Trust module initialized\");",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "47",
        "column": "5",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "47: log::info!(\"Trust module shutdown\");",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "99",
        "column": "43",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: could not find `container` in `execution`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "99: let container_id = \nexecution::container::get_current_container_id()",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "E0532": [
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "238",
        "column": "13",
        "level": "error",
        "code": "E0532",
        "message": "expected unit struct, unit variant or constant, found tuple \nvariant `TrustVector::Signed`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "238: TrustVector::Signed => 0.8,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "E0425": [
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "28",
        "column": "23",
        "level": "error",
        "code": "E0425",
        "message": "cannot find function `init` in module `syscall_enforcer`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "28: syscall_enforcer::init(policy_graph.clone())?;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "59",
        "column": "38",
        "level": "error",
        "code": "E0425",
        "message": "cannot find function `get_syscall_enforcer` in module \n`syscall_enforcer`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "59: let enforcer = syscall_enforcer::get_syscall_enforcer();",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "E0603": [
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "13",
        "column": "28",
        "level": "error",
        "code": "E0603",
        "message": "struct `Signature` is private",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "13: use common::crypto::{Hash, Signature, PublicKey};\n21: use ed25519_dalek::{SigningKey, VerifyingKey, Signature, Signer, \nVerifier};\n13: use common::crypto::{Hash, ed25519::Signature, PublicKey};",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "124",
        "column": "25",
        "level": "error",
        "code": "E0603",
        "message": "function `execute_syscall` is private",
        "help": "`#[warn(unused_imports)]` on by default\n\nwarning: ambiguous glob re-exports\n  --> microkernel\\src\\core\\mod.rs:11:9\n   |\n11 | pub use boot::*;\n   |         ^^^^^^^ the name `init` in the value namespace is first \nre-exported here\n12 | pub use runtime::*;\n13 | pub use scheduler::*;\n   |         ------------ but the name `init` in the value namespace is also \nre-exported here\n   |",
        "rust_suggestion": "`#[warn(unused_imports)]` on by default\n\nwarning: ambiguous glob re-exports\n  --> microkernel\\src\\core\\mod.rs:11:9\n   |\n11 | pub use boot::*;\n   |         ^^^^^^^ the name `init` in the value namespace is first \nre-exported here\n12 | pub use runtime::*;\n13 | pub use scheduler::*;\n   |         ------------ but the name `init` in the value namespace is also \nre-exported here\n   |",
        "code_snippet": "124: execution::syscall::execute_syscall(syscall, args, identity, &mut \nspan)\n170: fn execute_syscall(syscall: &str, args: &[&str]) -> Result<()> {\n8: use common::error::{ForgeError, Result};\n11: pub use boot::*;\n12: pub use runtime::*;\n13: pub use scheduler::*;\n11: pub use boot::*;\n12: pub use runtime::*;\n13: pub use scheduler::*;\n11: pub use boot::*;\n12: pub use runtime::*;\n13: pub use scheduler::*;\n12: pub use runtime::*;\n13: pub use scheduler::*;\n14: use wasmtime::{Engine, Module, Store, Instance, Linker};\n6: use std::collections::HashMap;\n10: use uuid::Uuid;\n9: use uuid::Uuid;\n11: use crate::execution::syscall::{SyscallContext, SyscallResult};",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "E0308": [
      {
        "file": "microkernel\\src\\core\\boot.rs",
        "line": "81",
        "column": "20",
        "level": "error",
        "code": "E0308",
        "message": "arguments to this function are incorrect",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "81: let identity = IdentityContext::new(\"system\", \"boot\");\n51: pub fn new(tenant_id: String, user_id: String) -> Self {\n81: let identity = IdentityContext::new(\"system\".to_string(), \"boot\");\n81: let identity = IdentityContext::new(\"system\", \"boot\".to_string());",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "369",
        "column": "13",
        "level": "error",
        "code": "E0308",
        "message": "mismatched types",
        "help": "expected enum `common::identity::TrustVector`\n            found enum constructor `fn(std::string::String) -> \ncommon::identity::TrustVector {Signed}`\nhelp: use parentheses to construct this tuple variant\n    |\n369 |             TrustVector::Signed(/* std::string::String */)\n    |                                +++++++++++++++++++++++++++",
        "rust_suggestion": "expected enum `common::identity::TrustVector`\n            found enum constructor `fn(std::string::String) -> \ncommon::identity::TrustVector {Signed}`\nhelp: use parentheses to construct this tuple variant\n    |\n369 |             TrustVector::Signed(/* std::string::String */)\n    |                                +++++++++++++++++++++++++++",
        "code_snippet": "357: fn determine_trust_vector(&self, trust_score: f64, context: \n&TrustEvaluationContext) -> TrustVector {\n369: TrustVector::Signed\n369: TrustVector::Signed(/* std::string::String */)",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "37",
        "column": "22",
        "level": "error",
        "code": "E0308",
        "message": "mismatched types",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "37: evaluation::init(policy_graph)?;\n85: pub fn init(policy_graph: ZtaPolicyGraph) -> Result<(), String> {",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "E0061": [
      {
        "file": "microkernel\\src\\core\\boot.rs",
        "line": "158",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "158: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n158: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "171",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "171: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n171: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "205",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "205: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n205: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "235",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "235: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n235: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "312",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "312: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n312: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "357",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "357: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n357: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "116",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "116: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n116: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "156",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "156: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n156: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "184",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "184: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n184: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "220",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "220: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n220: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "243",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "243: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n243: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "382",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "382: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n382: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "58",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "124",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this function takes 2 arguments but 4 arguments were supplied",
        "help": "`#[warn(unused_variables)]` on by default\n\nwarning: unused variable: `state`\n   --> microkernel\\src\\execution\\wasm.rs:164:13\n    |\n164 |     let mut state = WasmHostState::Running;\n    |             ^^^^^ help: if this is intentional, prefix it with an \nunderscore: `_state`\n\nwarning: variable does not need to be mutable\n   --> microkernel\\src\\execution\\wasm.rs:164:9\n    |\n164 |     let mut state = WasmHostState::Running;\n    |         ----^^^^^\n    |         |\n    |         help: remove this `mut`\n    |",
        "rust_suggestion": "`#[warn(unused_variables)]` on by default\n\nwarning: unused variable: `state`\n   --> microkernel\\src\\execution\\wasm.rs:164:13\n    |\n164 |     let mut state = WasmHostState::Running;\n    |             ^^^^^ help: if this is intentional, prefix it with an \nunderscore: `_state`\n\nwarning: variable does not need to be mutable\n   --> microkernel\\src\\execution\\wasm.rs:164:9\n    |\n164 |     let mut state = WasmHostState::Running;\n    |         ----^^^^^\n    |         |\n    |         help: remove this `mut`\n    |",
        "code_snippet": "124: execution::syscall::execute_syscall(syscall, args, identity, &mut \nspan)\n170: fn execute_syscall(syscall: &str, args: &[&str]) -> Result<()> {\n249: let runtime_context = get_runtime_context()?;\n164: let mut state = WasmHostState::Running;\n164: let mut state = WasmHostState::Running;\n199: fn execute_file_open(args: &[&str]) -> Result<()> {\n204: fn execute_file_read(args: &[&str]) -> Result<()> {\n209: fn execute_file_write(args: &[&str]) -> Result<()> {\n214: fn execute_file_close(args: &[&str]) -> Result<()> {\n219: fn execute_net_connect(args: &[&str]) -> Result<()> {\n224: fn execute_net_send(args: &[&str]) -> Result<()> {\n229: fn execute_net_recv(args: &[&str]) -> Result<()> {\n234: fn execute_net_close(args: &[&str]) -> Result<()> {\n239: fn execute_proc_create(args: &[&str]) -> Result<()> {\n244: fn execute_proc_kill(args: &[&str]) -> Result<()> {\n249: fn execute_mem_alloc(args: &[&str]) -> Result<()> {\n254: fn execute_mem_free(args: &[&str]) -> Result<()> {\n259: fn execute_ipc_send(args: &[&str]) -> Result<()> {\n264: fn execute_ipc_recv(args: &[&str]) -> Result<()> {\n269: fn execute_time_get(args: &[&str]) -> Result<()> {\n274: fn execute_time_sleep(args: &[&str]) -> Result<()> {\n279: fn execute_crypto_hash(args: &[&str]) -> Result<()> {\n284: fn execute_crypto_sign(args: &[&str]) -> Result<()> {\n289: fn execute_crypto_verify(args: &[&str]) -> Result<()> {\n294: fn execute_sys_info(args: &[&str]) -> Result<()> {\n315: fn calculate_behavioral_score(&self, context_id: Uuid) -> f64 {\n322: fn calculate_environmental_score(&self, context_id: Uuid) -> f64 {\n329: fn calculate_policy_adjustments(&self, context_id: Uuid) -> f64 {\n386: let context = self.get_context(context_id)?;\n383: trust_score: f64,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "E0599": [
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "242",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "242: ForgeError::Runtime(\"Runtime context not \ninitialized\".to_string())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "297",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "297: ForgeError::Runtime(format!(\"Container {} not found\", \ncontainer_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "323",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "323: ForgeError::Runtime(format!(\"Container {} not found\", \ncontainer_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "366",
        "column": "21",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "366: ForgeError::Runtime(format!(\"Container {} not found\", \ncontainer_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "191",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "191: ForgeError::Runtime(\"Scheduler context not \ninitialized\".to_string())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "191",
        "column": "21",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "191: ForgeError::Execution(format!(\"Failed to read module file: {}\", \ne))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "195",
        "column": "48",
        "level": "error",
        "code": "E0599",
        "message": "no function or associated item named `digest` found for struct \n`CoreWrapper` in the current scope",
        "help": "items from traits can only be used if the trait is in scope\nhelp: trait `Digest` which provides `digest` is implemented but not in scope; \nperhaps you want to import it\n    |\n6   + use sha3::Digest;\n    |",
        "rust_suggestion": "items from traits can only be used if the trait is in scope\nhelp: trait `Digest` which provides `digest` is implemented but not in scope; \nperhaps you want to import it\n    |\n6   + use sha3::Digest;\n    |",
        "code_snippet": "195: let hash = format!(\"{:x}\", sha3::Sha3_256::digest(&module_bytes));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "218",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "218: ForgeError::Execution(format!(\"Failed to compile module: \n{}\", e))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "282",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "282: ForgeError::Execution(format!(\"Module {} not found\", \nmodule_name))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "332",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "332: ForgeError::Execution(format!(\"Instance {} not found\", \ninstance_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "338",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "338: return Err(ForgeError::Execution(format!(\"Function {} not found \nin instance {}\", function_name, instance_id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "369",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "369: ForgeError::Execution(format!(\"Instance {} not found\", \ninstance_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\syscall.rs",
        "line": "101",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Trust` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "101: return Err(ForgeError::Trust(format!(\"Syscall {} denied by ZTA \npolicy\", syscall)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\syscall.rs",
        "line": "150",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "150: Err(ForgeError::Execution(format!(\"Unknown syscall type: {}\", \nsyscall)))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\syscall.rs",
        "line": "193",
        "column": "30",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "193: _ => Err(ForgeError::Execution(format!(\"Unknown syscall: {}\", \nsyscall))),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "175",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "175: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to start\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "210",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "210: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to stop\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "248",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "248: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to pause\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "283",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "283: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to resume\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "322",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "322: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to execute commands\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "117",
        "column": "52",
        "level": "error",
        "code": "E0599",
        "message": "no function or associated item named `new` found for struct \n`zta_policy::ZtaPolicyGraph` in the current scope",
        "help": "items from traits can only be used if the trait is implemented and \nin scope",
        "rust_suggestion": "items from traits can only be used if the trait is implemented and \nin scope",
        "code_snippet": "117: let policy_graph = ZtaPolicyGraph::new();",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "249",
        "column": "29",
        "level": "error",
        "code": "E0599",
        "message": "no method named `is_some` found for struct `std::string::String` \nin the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "249: if identity.user_id.is_some() {",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "75",
        "column": "34",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `TrustViolation` found for \nenum `ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "75: .map_err(|e| ForgeError::TrustViolation(e))?;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "82",
        "column": "36",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `TrustViolation` found for \nenum `ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "82: return Err(ForgeError::TrustViolation(format!(\"Syscall '{}' \nblocked by ZTA policy\", syscall)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "107",
        "column": "39",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `TrustViolation` found for \nenum `ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "107: ).map_err(|e| ForgeError::TrustViolation(e))?;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "109",
        "column": "36",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `TrustViolation` found for \nenum `ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "109: return Err(ForgeError::TrustViolation(format!(\"Process \nquarantined due to syscall '{}' violation\", syscall)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "E0277": [
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "57",
        "column": "5",
        "level": "error",
        "code": "E0277",
        "message": "`Module` doesn't implement `std::fmt::Debug`",
        "help": "the trait `std::fmt::Debug` is not implemented for `Module`",
        "rust_suggestion": "the trait `std::fmt::Debug` is not implemented for `Module`",
        "code_snippet": "37: #[derive(Debug)]\n57: pub wasmtime_module: Option<wasmtime::Module>,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "E0609": [
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "258",
        "column": "55",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "258: let policy = match self.policies.get(&context.syscall) {",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "263",
        "column": "85",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "263: reason: Some(format!(\"No policy found for syscall: \n{}\", context.syscall)),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "299",
        "column": "71",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "299: Some(patterns) => patterns.iter().any(|p| \ncontext.syscall.contains(p)),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "151",
        "column": "26",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "151: &context.syscall,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "162",
        "column": "54",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "162: let policy = \ngraph.policies.get(&context.syscall).unwrap_or_else(|| {",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "163",
        "column": "68",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "163: panic!(\"Policy not found for syscall: {}\", \ncontext.syscall)",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "E0560": [
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "397",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `syscall`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "397: syscall: syscall.to_string(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "400",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `execution_dna`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "400: execution_dna: None,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "401",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `timestamp`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "401: timestamp: Utc::now(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "209",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `syscall`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "209: syscall: syscall.to_string(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "212",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `execution_dna`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "212: execution_dna: None,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "213",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `timestamp`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "213: timestamp: Utc::now(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "90",
        "column": "17",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallTrace` has no field named `id`",
        "help": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "rust_suggestion": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "code_snippet": "90: id: uuid::Uuid::new_v4(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "91",
        "column": "17",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallTrace` has no field named `syscall_name`",
        "help": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "rust_suggestion": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "code_snippet": "91: syscall_name: syscall.to_string(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "95",
        "column": "17",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallTrace` has no field named `result`",
        "help": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "rust_suggestion": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "code_snippet": "95: result: \"QUARANTINED\".to_string(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "E0689": [
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "274",
        "column": "36",
        "level": "error",
        "code": "E0689",
        "message": "can't call method `min` on ambiguous numeric type `{float}`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "274: (base_score + adjustments).min(1.0).max(0.0)",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "E0533": [
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "100",
        "column": "30",
        "level": "error",
        "code": "E0533",
        "message": "expected value, found struct variant `ForgeError::ExecutionError`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "100: .map_err(|e| ForgeError::ExecutionError(e))?;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "Unknown": [
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "46",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "49",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "52",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "57",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "60",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "63",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "69",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "72",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "75",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ]
  },
  "errors_by_category": {
    "General": [
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "27",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `observer`",
        "help": "to create the module `observer`, create file \n\"microkernel\\src\\observer.rs\" or \"microkernel\\src\\observer\\mod.rs\"",
        "rust_suggestion": "to create the module `observer`, create file \n\"microkernel\\src\\observer.rs\" or \"microkernel\\src\\observer\\mod.rs\"",
        "code_snippet": "27: pub mod observer;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "28",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `crypto`",
        "help": "to create the module `crypto`, create file \n\"microkernel\\src\\crypto.rs\" or \"microkernel\\src\\crypto\\mod.rs\"",
        "rust_suggestion": "to create the module `crypto`, create file \n\"microkernel\\src\\crypto.rs\" or \"microkernel\\src\\crypto\\mod.rs\"",
        "code_snippet": "28: pub mod crypto;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "29",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `diagnostics`",
        "help": "to create the module `diagnostics`, create file \n\"microkernel\\src\\diagnostics.rs\" or \"microkernel\\src\\diagnostics\\mod.rs\"",
        "rust_suggestion": "to create the module `diagnostics`, create file \n\"microkernel\\src\\diagnostics.rs\" or \"microkernel\\src\\diagnostics\\mod.rs\"",
        "code_snippet": "29: pub mod diagnostics;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "30",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `interface`",
        "help": "to create the module `interface`, create file \n\"microkernel\\src\\interface.rs\" or \"microkernel\\src\\interface\\mod.rs\"",
        "rust_suggestion": "to create the module `interface`, create file \n\"microkernel\\src\\interface.rs\" or \"microkernel\\src\\interface\\mod.rs\"",
        "code_snippet": "30: pub mod interface;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "31",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `config`",
        "help": "to create the module `config`, create file \n\"microkernel\\src\\config.rs\" or \"microkernel\\src\\config\\mod.rs\"",
        "rust_suggestion": "to create the module `config`, create file \n\"microkernel\\src\\config.rs\" or \"microkernel\\src\\config\\mod.rs\"",
        "code_snippet": "31: pub mod config;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "238",
        "column": "13",
        "level": "error",
        "code": "E0532",
        "message": "expected unit struct, unit variant or constant, found tuple \nvariant `TrustVector::Signed`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "238: TrustVector::Signed => 0.8,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\boot.rs",
        "line": "158",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "158: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n158: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "171",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "171: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n171: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "205",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "205: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n205: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "235",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "235: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n235: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "242",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "242: ForgeError::Runtime(\"Runtime context not \ninitialized\".to_string())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "297",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "297: ForgeError::Runtime(format!(\"Container {} not found\", \ncontainer_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "312",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "312: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n312: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "323",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "323: ForgeError::Runtime(format!(\"Container {} not found\", \ncontainer_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "357",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "357: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n357: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "366",
        "column": "21",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "366: ForgeError::Runtime(format!(\"Container {} not found\", \ncontainer_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "116",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "116: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n116: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "156",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "156: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n156: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "184",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "184: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n184: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "191",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "191: ForgeError::Runtime(\"Scheduler context not \ninitialized\".to_string())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "220",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "220: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n220: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "243",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "243: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n243: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "191",
        "column": "21",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "191: ForgeError::Execution(format!(\"Failed to read module file: {}\", \ne))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "195",
        "column": "48",
        "level": "error",
        "code": "E0599",
        "message": "no function or associated item named `digest` found for struct \n`CoreWrapper` in the current scope",
        "help": "items from traits can only be used if the trait is in scope\nhelp: trait `Digest` which provides `digest` is implemented but not in scope; \nperhaps you want to import it\n    |\n6   + use sha3::Digest;\n    |",
        "rust_suggestion": "items from traits can only be used if the trait is in scope\nhelp: trait `Digest` which provides `digest` is implemented but not in scope; \nperhaps you want to import it\n    |\n6   + use sha3::Digest;\n    |",
        "code_snippet": "195: let hash = format!(\"{:x}\", sha3::Sha3_256::digest(&module_bytes));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "218",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "218: ForgeError::Execution(format!(\"Failed to compile module: \n{}\", e))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "282",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "282: ForgeError::Execution(format!(\"Module {} not found\", \nmodule_name))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "332",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "332: ForgeError::Execution(format!(\"Instance {} not found\", \ninstance_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "338",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "338: return Err(ForgeError::Execution(format!(\"Function {} not found \nin instance {}\", function_name, instance_id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "369",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "369: ForgeError::Execution(format!(\"Instance {} not found\", \ninstance_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "382",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "382: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n382: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\syscall.rs",
        "line": "101",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Trust` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "101: return Err(ForgeError::Trust(format!(\"Syscall {} denied by ZTA \npolicy\", syscall)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\syscall.rs",
        "line": "150",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "150: Err(ForgeError::Execution(format!(\"Unknown syscall type: {}\", \nsyscall)))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\syscall.rs",
        "line": "193",
        "column": "30",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "193: _ => Err(ForgeError::Execution(format!(\"Unknown syscall: {}\", \nsyscall))),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "175",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "175: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to start\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "210",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "210: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to stop\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "248",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "248: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to pause\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "283",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "283: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to resume\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "322",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "322: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to execute commands\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "258",
        "column": "55",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "258: let policy = match self.policies.get(&context.syscall) {",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "263",
        "column": "85",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "263: reason: Some(format!(\"No policy found for syscall: \n{}\", context.syscall)),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "299",
        "column": "71",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "299: Some(patterns) => patterns.iter().any(|p| \ncontext.syscall.contains(p)),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "397",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `syscall`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "397: syscall: syscall.to_string(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "400",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `execution_dna`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "400: execution_dna: None,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "401",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `timestamp`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "401: timestamp: Utc::now(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "151",
        "column": "26",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "151: &context.syscall,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "162",
        "column": "54",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "162: let policy = \ngraph.policies.get(&context.syscall).unwrap_or_else(|| {",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "163",
        "column": "68",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "163: panic!(\"Policy not found for syscall: {}\", \ncontext.syscall)",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "209",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `syscall`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "209: syscall: syscall.to_string(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "212",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `execution_dna`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "212: execution_dna: None,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "213",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `timestamp`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "213: timestamp: Utc::now(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "117",
        "column": "52",
        "level": "error",
        "code": "E0599",
        "message": "no function or associated item named `new` found for struct \n`zta_policy::ZtaPolicyGraph` in the current scope",
        "help": "items from traits can only be used if the trait is implemented and \nin scope",
        "rust_suggestion": "items from traits can only be used if the trait is implemented and \nin scope",
        "code_snippet": "117: let policy_graph = ZtaPolicyGraph::new();",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "249",
        "column": "29",
        "level": "error",
        "code": "E0599",
        "message": "no method named `is_some` found for struct `std::string::String` \nin the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "249: if identity.user_id.is_some() {",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "274",
        "column": "36",
        "level": "error",
        "code": "E0689",
        "message": "can't call method `min` on ambiguous numeric type `{float}`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "274: (base_score + adjustments).min(1.0).max(0.0)",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "58",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "75",
        "column": "34",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `TrustViolation` found for \nenum `ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "75: .map_err(|e| ForgeError::TrustViolation(e))?;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "82",
        "column": "36",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `TrustViolation` found for \nenum `ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "82: return Err(ForgeError::TrustViolation(format!(\"Syscall '{}' \nblocked by ZTA policy\", syscall)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "90",
        "column": "17",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallTrace` has no field named `id`",
        "help": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "rust_suggestion": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "code_snippet": "90: id: uuid::Uuid::new_v4(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "91",
        "column": "17",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallTrace` has no field named `syscall_name`",
        "help": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "rust_suggestion": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "code_snippet": "91: syscall_name: syscall.to_string(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "95",
        "column": "17",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallTrace` has no field named `result`",
        "help": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "rust_suggestion": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "code_snippet": "95: result: \"QUARANTINED\".to_string(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "100",
        "column": "30",
        "level": "error",
        "code": "E0533",
        "message": "expected value, found struct variant `ForgeError::ExecutionError`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "100: .map_err(|e| ForgeError::ExecutionError(e))?;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "107",
        "column": "39",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `TrustViolation` found for \nenum `ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "107: ).map_err(|e| ForgeError::TrustViolation(e))?;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "109",
        "column": "36",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `TrustViolation` found for \nenum `ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "109: return Err(ForgeError::TrustViolation(format!(\"Process \nquarantined due to syscall '{}' violation\", syscall)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "124",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this function takes 2 arguments but 4 arguments were supplied",
        "help": "`#[warn(unused_variables)]` on by default\n\nwarning: unused variable: `state`\n   --> microkernel\\src\\execution\\wasm.rs:164:13\n    |\n164 |     let mut state = WasmHostState::Running;\n    |             ^^^^^ help: if this is intentional, prefix it with an \nunderscore: `_state`\n\nwarning: variable does not need to be mutable\n   --> microkernel\\src\\execution\\wasm.rs:164:9\n    |\n164 |     let mut state = WasmHostState::Running;\n    |         ----^^^^^\n    |         |\n    |         help: remove this `mut`\n    |",
        "rust_suggestion": "`#[warn(unused_variables)]` on by default\n\nwarning: unused variable: `state`\n   --> microkernel\\src\\execution\\wasm.rs:164:13\n    |\n164 |     let mut state = WasmHostState::Running;\n    |             ^^^^^ help: if this is intentional, prefix it with an \nunderscore: `_state`\n\nwarning: variable does not need to be mutable\n   --> microkernel\\src\\execution\\wasm.rs:164:9\n    |\n164 |     let mut state = WasmHostState::Running;\n    |         ----^^^^^\n    |         |\n    |         help: remove this `mut`\n    |",
        "code_snippet": "124: execution::syscall::execute_syscall(syscall, args, identity, &mut \nspan)\n170: fn execute_syscall(syscall: &str, args: &[&str]) -> Result<()> {\n249: let runtime_context = get_runtime_context()?;\n164: let mut state = WasmHostState::Running;\n164: let mut state = WasmHostState::Running;\n199: fn execute_file_open(args: &[&str]) -> Result<()> {\n204: fn execute_file_read(args: &[&str]) -> Result<()> {\n209: fn execute_file_write(args: &[&str]) -> Result<()> {\n214: fn execute_file_close(args: &[&str]) -> Result<()> {\n219: fn execute_net_connect(args: &[&str]) -> Result<()> {\n224: fn execute_net_send(args: &[&str]) -> Result<()> {\n229: fn execute_net_recv(args: &[&str]) -> Result<()> {\n234: fn execute_net_close(args: &[&str]) -> Result<()> {\n239: fn execute_proc_create(args: &[&str]) -> Result<()> {\n244: fn execute_proc_kill(args: &[&str]) -> Result<()> {\n249: fn execute_mem_alloc(args: &[&str]) -> Result<()> {\n254: fn execute_mem_free(args: &[&str]) -> Result<()> {\n259: fn execute_ipc_send(args: &[&str]) -> Result<()> {\n264: fn execute_ipc_recv(args: &[&str]) -> Result<()> {\n269: fn execute_time_get(args: &[&str]) -> Result<()> {\n274: fn execute_time_sleep(args: &[&str]) -> Result<()> {\n279: fn execute_crypto_hash(args: &[&str]) -> Result<()> {\n284: fn execute_crypto_sign(args: &[&str]) -> Result<()> {\n289: fn execute_crypto_verify(args: &[&str]) -> Result<()> {\n294: fn execute_sys_info(args: &[&str]) -> Result<()> {\n315: fn calculate_behavioral_score(&self, context_id: Uuid) -> f64 {\n322: fn calculate_environmental_score(&self, context_id: Uuid) -> f64 {\n329: fn calculate_policy_adjustments(&self, context_id: Uuid) -> f64 {\n386: let context = self.get_context(context_id)?;\n383: trust_score: f64,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "46",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "49",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "52",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "57",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "60",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "63",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "69",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "72",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "75",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "Module System": [
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "13",
        "column": "22",
        "level": "error",
        "code": "E0432",
        "message": "unresolved imports `common::crypto::Hash`, \n`common::crypto::PublicKey`",
        "help": "consider importing one of these items instead:\n           std::hash::Hash\n           common::db::IndexType::Hash",
        "rust_suggestion": "consider importing one of these items instead:\n           std::hash::Hash\n           common::db::IndexType::Hash",
        "code_snippet": "13: use common::crypto::{Hash, Signature, PublicKey};",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\syscall.rs",
        "line": "10",
        "column": "5",
        "level": "error",
        "code": "E0432",
        "message": "unresolved import `crate::trust::zta_policy::PolicyGraph`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "10: use crate::trust::zta_policy::PolicyGraph;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "78",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "78: log::warn!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "185",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "185: log::warn!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "208",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "208: log::info!(\"Applying full isolation to process {}\", \nprocess_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "213",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "213: log::info!(\"Applying network isolation to process {}\", \nprocess_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "218",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "218: log::info!(\"Applying filesystem isolation to process \n{}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "223",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "223: log::info!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "248",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "248: log::info!(\"No forensic data collection for process {}\", \nprocess_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "252",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "252: log::info!(\"Collecting metadata for process {}\", \nprocess_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "257",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "257: log::info!(\"Collecting full forensic data for process \n{}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "283",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "283: log::info!(\"Analyzing quarantined process {}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "309",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "309: log::info!(\"Terminating quarantined process {}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "326",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "326: log::info!(\"Recovering quarantined process {}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "346",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "346: log::info!(\"Removed process {} from quarantine\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "150",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "150: log::info!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "226",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "226: log::info!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "340",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "340: log::info!(\"Trusted key added: {}\", key_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "356",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "356: log::info!(\"Trusted key removed: {}\", key_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "147",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "147: log::info!(\"Trust evaluation context created: {}\", context_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "191",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "191: log::info!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "418",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "418: log::info!(\"Trust threshold set: {} = {}\", name, threshold);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "39",
        "column": "5",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "39: log::info!(\"Trust module initialized\");",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "47",
        "column": "5",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "47: log::info!(\"Trust module shutdown\");",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "99",
        "column": "43",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: could not find `container` in `execution`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "99: let container_id = \nexecution::container::get_current_container_id()",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "Undefined Item": [
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "28",
        "column": "23",
        "level": "error",
        "code": "E0425",
        "message": "cannot find function `init` in module `syscall_enforcer`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "28: syscall_enforcer::init(policy_graph.clone())?;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "59",
        "column": "38",
        "level": "error",
        "code": "E0425",
        "message": "cannot find function `get_syscall_enforcer` in module \n`syscall_enforcer`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "59: let enforcer = syscall_enforcer::get_syscall_enforcer();",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "Privacy Violation": [
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "13",
        "column": "28",
        "level": "error",
        "code": "E0603",
        "message": "struct `Signature` is private",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "13: use common::crypto::{Hash, Signature, PublicKey};\n21: use ed25519_dalek::{SigningKey, VerifyingKey, Signature, Signer, \nVerifier};\n13: use common::crypto::{Hash, ed25519::Signature, PublicKey};",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "124",
        "column": "25",
        "level": "error",
        "code": "E0603",
        "message": "function `execute_syscall` is private",
        "help": "`#[warn(unused_imports)]` on by default\n\nwarning: ambiguous glob re-exports\n  --> microkernel\\src\\core\\mod.rs:11:9\n   |\n11 | pub use boot::*;\n   |         ^^^^^^^ the name `init` in the value namespace is first \nre-exported here\n12 | pub use runtime::*;\n13 | pub use scheduler::*;\n   |         ------------ but the name `init` in the value namespace is also \nre-exported here\n   |",
        "rust_suggestion": "`#[warn(unused_imports)]` on by default\n\nwarning: ambiguous glob re-exports\n  --> microkernel\\src\\core\\mod.rs:11:9\n   |\n11 | pub use boot::*;\n   |         ^^^^^^^ the name `init` in the value namespace is first \nre-exported here\n12 | pub use runtime::*;\n13 | pub use scheduler::*;\n   |         ------------ but the name `init` in the value namespace is also \nre-exported here\n   |",
        "code_snippet": "124: execution::syscall::execute_syscall(syscall, args, identity, &mut \nspan)\n170: fn execute_syscall(syscall: &str, args: &[&str]) -> Result<()> {\n8: use common::error::{ForgeError, Result};\n11: pub use boot::*;\n12: pub use runtime::*;\n13: pub use scheduler::*;\n11: pub use boot::*;\n12: pub use runtime::*;\n13: pub use scheduler::*;\n11: pub use boot::*;\n12: pub use runtime::*;\n13: pub use scheduler::*;\n12: pub use runtime::*;\n13: pub use scheduler::*;\n14: use wasmtime::{Engine, Module, Store, Instance, Linker};\n6: use std::collections::HashMap;\n10: use uuid::Uuid;\n9: use uuid::Uuid;\n11: use crate::execution::syscall::{SyscallContext, SyscallResult};",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "Type Mismatch": [
      {
        "file": "microkernel\\src\\core\\boot.rs",
        "line": "81",
        "column": "20",
        "level": "error",
        "code": "E0308",
        "message": "arguments to this function are incorrect",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "81: let identity = IdentityContext::new(\"system\", \"boot\");\n51: pub fn new(tenant_id: String, user_id: String) -> Self {\n81: let identity = IdentityContext::new(\"system\".to_string(), \"boot\");\n81: let identity = IdentityContext::new(\"system\", \"boot\".to_string());",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "369",
        "column": "13",
        "level": "error",
        "code": "E0308",
        "message": "mismatched types",
        "help": "expected enum `common::identity::TrustVector`\n            found enum constructor `fn(std::string::String) -> \ncommon::identity::TrustVector {Signed}`\nhelp: use parentheses to construct this tuple variant\n    |\n369 |             TrustVector::Signed(/* std::string::String */)\n    |                                +++++++++++++++++++++++++++",
        "rust_suggestion": "expected enum `common::identity::TrustVector`\n            found enum constructor `fn(std::string::String) -> \ncommon::identity::TrustVector {Signed}`\nhelp: use parentheses to construct this tuple variant\n    |\n369 |             TrustVector::Signed(/* std::string::String */)\n    |                                +++++++++++++++++++++++++++",
        "code_snippet": "357: fn determine_trust_vector(&self, trust_score: f64, context: \n&TrustEvaluationContext) -> TrustVector {\n369: TrustVector::Signed\n369: TrustVector::Signed(/* std::string::String */)",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "37",
        "column": "22",
        "level": "error",
        "code": "E0308",
        "message": "mismatched types",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "37: evaluation::init(policy_graph)?;\n85: pub fn init(policy_graph: ZtaPolicyGraph) -> Result<(), String> {",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ],
    "Trait Bound": [
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "57",
        "column": "5",
        "level": "error",
        "code": "E0277",
        "message": "`Module` doesn't implement `std::fmt::Debug`",
        "help": "the trait `std::fmt::Debug` is not implemented for `Module`",
        "rust_suggestion": "the trait `std::fmt::Debug` is not implemented for `Module`",
        "code_snippet": "37: #[derive(Debug)]\n57: pub wasmtime_module: Option<wasmtime::Module>,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ]
  },
  "errors_by_severity": {
    "error": [
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "27",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `observer`",
        "help": "to create the module `observer`, create file \n\"microkernel\\src\\observer.rs\" or \"microkernel\\src\\observer\\mod.rs\"",
        "rust_suggestion": "to create the module `observer`, create file \n\"microkernel\\src\\observer.rs\" or \"microkernel\\src\\observer\\mod.rs\"",
        "code_snippet": "27: pub mod observer;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "28",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `crypto`",
        "help": "to create the module `crypto`, create file \n\"microkernel\\src\\crypto.rs\" or \"microkernel\\src\\crypto\\mod.rs\"",
        "rust_suggestion": "to create the module `crypto`, create file \n\"microkernel\\src\\crypto.rs\" or \"microkernel\\src\\crypto\\mod.rs\"",
        "code_snippet": "28: pub mod crypto;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "29",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `diagnostics`",
        "help": "to create the module `diagnostics`, create file \n\"microkernel\\src\\diagnostics.rs\" or \"microkernel\\src\\diagnostics\\mod.rs\"",
        "rust_suggestion": "to create the module `diagnostics`, create file \n\"microkernel\\src\\diagnostics.rs\" or \"microkernel\\src\\diagnostics\\mod.rs\"",
        "code_snippet": "29: pub mod diagnostics;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "30",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `interface`",
        "help": "to create the module `interface`, create file \n\"microkernel\\src\\interface.rs\" or \"microkernel\\src\\interface\\mod.rs\"",
        "rust_suggestion": "to create the module `interface`, create file \n\"microkernel\\src\\interface.rs\" or \"microkernel\\src\\interface\\mod.rs\"",
        "code_snippet": "30: pub mod interface;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "31",
        "column": "1",
        "level": "error",
        "code": "E0583",
        "message": "file not found for module `config`",
        "help": "to create the module `config`, create file \n\"microkernel\\src\\config.rs\" or \"microkernel\\src\\config\\mod.rs\"",
        "rust_suggestion": "to create the module `config`, create file \n\"microkernel\\src\\config.rs\" or \"microkernel\\src\\config\\mod.rs\"",
        "code_snippet": "31: pub mod config;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "13",
        "column": "22",
        "level": "error",
        "code": "E0432",
        "message": "unresolved imports `common::crypto::Hash`, \n`common::crypto::PublicKey`",
        "help": "consider importing one of these items instead:\n           std::hash::Hash\n           common::db::IndexType::Hash",
        "rust_suggestion": "consider importing one of these items instead:\n           std::hash::Hash\n           common::db::IndexType::Hash",
        "code_snippet": "13: use common::crypto::{Hash, Signature, PublicKey};",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\syscall.rs",
        "line": "10",
        "column": "5",
        "level": "error",
        "code": "E0432",
        "message": "unresolved import `crate::trust::zta_policy::PolicyGraph`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "10: use crate::trust::zta_policy::PolicyGraph;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "78",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "78: log::warn!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "185",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "185: log::warn!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "208",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "208: log::info!(\"Applying full isolation to process {}\", \nprocess_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "213",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "213: log::info!(\"Applying network isolation to process {}\", \nprocess_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "218",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "218: log::info!(\"Applying filesystem isolation to process \n{}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "223",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "223: log::info!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "248",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "248: log::info!(\"No forensic data collection for process {}\", \nprocess_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "252",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "252: log::info!(\"Collecting metadata for process {}\", \nprocess_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "257",
        "column": "17",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "257: log::info!(\"Collecting full forensic data for process \n{}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "283",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "283: log::info!(\"Analyzing quarantined process {}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "309",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "309: log::info!(\"Terminating quarantined process {}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "326",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "326: log::info!(\"Recovering quarantined process {}\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\redzone.rs",
        "line": "346",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "346: log::info!(\"Removed process {} from quarantine\", process_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "150",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "150: log::info!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "226",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "226: log::info!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "340",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "340: log::info!(\"Trusted key added: {}\", key_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "356",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "356: log::info!(\"Trusted key removed: {}\", key_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "147",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "147: log::info!(\"Trust evaluation context created: {}\", context_id);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "191",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "191: log::info!(",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "418",
        "column": "9",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "418: log::info!(\"Trust threshold set: {} = {}\", name, threshold);",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "39",
        "column": "5",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "39: log::info!(\"Trust module initialized\");",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "47",
        "column": "5",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: use of unresolved module or unlinked crate \n`log`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "47: log::info!(\"Trust module shutdown\");",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "99",
        "column": "43",
        "level": "error",
        "code": "E0433",
        "message": "failed to resolve: could not find `container` in `execution`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "99: let container_id = \nexecution::container::get_current_container_id()",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "238",
        "column": "13",
        "level": "error",
        "code": "E0532",
        "message": "expected unit struct, unit variant or constant, found tuple \nvariant `TrustVector::Signed`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "238: TrustVector::Signed => 0.8,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "28",
        "column": "23",
        "level": "error",
        "code": "E0425",
        "message": "cannot find function `init` in module `syscall_enforcer`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "28: syscall_enforcer::init(policy_graph.clone())?;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "59",
        "column": "38",
        "level": "error",
        "code": "E0425",
        "message": "cannot find function `get_syscall_enforcer` in module \n`syscall_enforcer`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "59: let enforcer = syscall_enforcer::get_syscall_enforcer();",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\attestation.rs",
        "line": "13",
        "column": "28",
        "level": "error",
        "code": "E0603",
        "message": "struct `Signature` is private",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "13: use common::crypto::{Hash, Signature, PublicKey};\n21: use ed25519_dalek::{SigningKey, VerifyingKey, Signature, Signer, \nVerifier};\n13: use common::crypto::{Hash, ed25519::Signature, PublicKey};",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "124",
        "column": "25",
        "level": "error",
        "code": "E0603",
        "message": "function `execute_syscall` is private",
        "help": "`#[warn(unused_imports)]` on by default\n\nwarning: ambiguous glob re-exports\n  --> microkernel\\src\\core\\mod.rs:11:9\n   |\n11 | pub use boot::*;\n   |         ^^^^^^^ the name `init` in the value namespace is first \nre-exported here\n12 | pub use runtime::*;\n13 | pub use scheduler::*;\n   |         ------------ but the name `init` in the value namespace is also \nre-exported here\n   |",
        "rust_suggestion": "`#[warn(unused_imports)]` on by default\n\nwarning: ambiguous glob re-exports\n  --> microkernel\\src\\core\\mod.rs:11:9\n   |\n11 | pub use boot::*;\n   |         ^^^^^^^ the name `init` in the value namespace is first \nre-exported here\n12 | pub use runtime::*;\n13 | pub use scheduler::*;\n   |         ------------ but the name `init` in the value namespace is also \nre-exported here\n   |",
        "code_snippet": "124: execution::syscall::execute_syscall(syscall, args, identity, &mut \nspan)\n170: fn execute_syscall(syscall: &str, args: &[&str]) -> Result<()> {\n8: use common::error::{ForgeError, Result};\n11: pub use boot::*;\n12: pub use runtime::*;\n13: pub use scheduler::*;\n11: pub use boot::*;\n12: pub use runtime::*;\n13: pub use scheduler::*;\n11: pub use boot::*;\n12: pub use runtime::*;\n13: pub use scheduler::*;\n12: pub use runtime::*;\n13: pub use scheduler::*;\n14: use wasmtime::{Engine, Module, Store, Instance, Linker};\n6: use std::collections::HashMap;\n10: use uuid::Uuid;\n9: use uuid::Uuid;\n11: use crate::execution::syscall::{SyscallContext, SyscallResult};",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\boot.rs",
        "line": "81",
        "column": "20",
        "level": "error",
        "code": "E0308",
        "message": "arguments to this function are incorrect",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "81: let identity = IdentityContext::new(\"system\", \"boot\");\n51: pub fn new(tenant_id: String, user_id: String) -> Self {\n81: let identity = IdentityContext::new(\"system\".to_string(), \"boot\");\n81: let identity = IdentityContext::new(\"system\", \"boot\".to_string());",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\boot.rs",
        "line": "158",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "158: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n158: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "171",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "171: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n171: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "205",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "205: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n205: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "235",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "235: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n235: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "242",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "242: ForgeError::Runtime(\"Runtime context not \ninitialized\".to_string())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "297",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "297: ForgeError::Runtime(format!(\"Container {} not found\", \ncontainer_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "312",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "312: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n312: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "323",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "323: ForgeError::Runtime(format!(\"Container {} not found\", \ncontainer_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "357",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "357: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n357: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\runtime.rs",
        "line": "366",
        "column": "21",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "366: ForgeError::Runtime(format!(\"Container {} not found\", \ncontainer_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "116",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "116: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n116: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "156",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "156: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n156: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "184",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "184: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n184: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "191",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Runtime` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "191: ForgeError::Runtime(\"Scheduler context not \ninitialized\".to_string())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "220",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "220: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n220: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\core\\scheduler.rs",
        "line": "243",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "243: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n243: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "57",
        "column": "5",
        "level": "error",
        "code": "E0277",
        "message": "`Module` doesn't implement `std::fmt::Debug`",
        "help": "the trait `std::fmt::Debug` is not implemented for `Module`",
        "rust_suggestion": "the trait `std::fmt::Debug` is not implemented for `Module`",
        "code_snippet": "37: #[derive(Debug)]\n57: pub wasmtime_module: Option<wasmtime::Module>,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "191",
        "column": "21",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "191: ForgeError::Execution(format!(\"Failed to read module file: {}\", \ne))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "195",
        "column": "48",
        "level": "error",
        "code": "E0599",
        "message": "no function or associated item named `digest` found for struct \n`CoreWrapper` in the current scope",
        "help": "items from traits can only be used if the trait is in scope\nhelp: trait `Digest` which provides `digest` is implemented but not in scope; \nperhaps you want to import it\n    |\n6   + use sha3::Digest;\n    |",
        "rust_suggestion": "items from traits can only be used if the trait is in scope\nhelp: trait `Digest` which provides `digest` is implemented but not in scope; \nperhaps you want to import it\n    |\n6   + use sha3::Digest;\n    |",
        "code_snippet": "195: let hash = format!(\"{:x}\", sha3::Sha3_256::digest(&module_bytes));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "218",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "218: ForgeError::Execution(format!(\"Failed to compile module: \n{}\", e))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "282",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "282: ForgeError::Execution(format!(\"Module {} not found\", \nmodule_name))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "332",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "332: ForgeError::Execution(format!(\"Instance {} not found\", \ninstance_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "338",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "338: return Err(ForgeError::Execution(format!(\"Function {} not found \nin instance {}\", function_name, instance_id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "369",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "369: ForgeError::Execution(format!(\"Instance {} not found\", \ninstance_id))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\wasm.rs",
        "line": "382",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "382: Ok()\n532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n382: Ok(())",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\syscall.rs",
        "line": "101",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Trust` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "101: return Err(ForgeError::Trust(format!(\"Syscall {} denied by ZTA \npolicy\", syscall)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\syscall.rs",
        "line": "150",
        "column": "25",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "150: Err(ForgeError::Execution(format!(\"Unknown syscall type: {}\", \nsyscall)))",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\syscall.rs",
        "line": "193",
        "column": "30",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "193: _ => Err(ForgeError::Execution(format!(\"Unknown syscall: {}\", \nsyscall))),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "175",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "175: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to start\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "210",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "210: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to stop\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "248",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "248: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to pause\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "283",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "283: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to resume\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\execution\\sandbox.rs",
        "line": "322",
        "column": "32",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `Execution` found for enum \n`ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "322: return Err(ForgeError::Execution(format!(\"Sandbox {} is not in a \nvalid state to execute commands\", sandbox.id)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "258",
        "column": "55",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "258: let policy = match self.policies.get(&context.syscall) {",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "263",
        "column": "85",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "263: reason: Some(format!(\"No policy found for syscall: \n{}\", context.syscall)),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "299",
        "column": "71",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "299: Some(patterns) => patterns.iter().any(|p| \ncontext.syscall.contains(p)),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "397",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `syscall`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "397: syscall: syscall.to_string(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "400",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `execution_dna`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "400: execution_dna: None,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "401",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `timestamp`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "401: timestamp: Utc::now(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "151",
        "column": "26",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "151: &context.syscall,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "162",
        "column": "54",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "162: let policy = \ngraph.policies.get(&context.syscall).unwrap_or_else(|| {",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "163",
        "column": "68",
        "level": "error",
        "code": "E0609",
        "message": "no field `syscall` on type `&SyscallContext`",
        "help": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `args`, `identity`, \n`policy_decisions` ... and 2 others",
        "code_snippet": "163: panic!(\"Policy not found for syscall: {}\", \ncontext.syscall)",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "209",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `syscall`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "209: syscall: syscall.to_string(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "212",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `execution_dna`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "212: execution_dna: None,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\syscall_enforcer.rs",
        "line": "213",
        "column": "9",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallContext` has no field named `timestamp`",
        "help": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "rust_suggestion": "available fields are: `name`, `syscall_type`, `policy_decisions`, \n`execution_time_us`, `result`",
        "code_snippet": "213: timestamp: Utc::now(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "117",
        "column": "52",
        "level": "error",
        "code": "E0599",
        "message": "no function or associated item named `new` found for struct \n`zta_policy::ZtaPolicyGraph` in the current scope",
        "help": "items from traits can only be used if the trait is implemented and \nin scope",
        "rust_suggestion": "items from traits can only be used if the trait is implemented and \nin scope",
        "code_snippet": "117: let policy_graph = ZtaPolicyGraph::new();",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "249",
        "column": "29",
        "level": "error",
        "code": "E0599",
        "message": "no method named `is_some` found for struct `std::string::String` \nin the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "249: if identity.user_id.is_some() {",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "274",
        "column": "36",
        "level": "error",
        "code": "E0689",
        "message": "can't call method `min` on ambiguous numeric type `{float}`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "274: (base_score + adjustments).min(1.0).max(0.0)",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\evaluation.rs",
        "line": "369",
        "column": "13",
        "level": "error",
        "code": "E0308",
        "message": "mismatched types",
        "help": "expected enum `common::identity::TrustVector`\n            found enum constructor `fn(std::string::String) -> \ncommon::identity::TrustVector {Signed}`\nhelp: use parentheses to construct this tuple variant\n    |\n369 |             TrustVector::Signed(/* std::string::String */)\n    |                                +++++++++++++++++++++++++++",
        "rust_suggestion": "expected enum `common::identity::TrustVector`\n            found enum constructor `fn(std::string::String) -> \ncommon::identity::TrustVector {Signed}`\nhelp: use parentheses to construct this tuple variant\n    |\n369 |             TrustVector::Signed(/* std::string::String */)\n    |                                +++++++++++++++++++++++++++",
        "code_snippet": "357: fn determine_trust_vector(&self, trust_score: f64, context: \n&TrustEvaluationContext) -> TrustVector {\n369: TrustVector::Signed\n369: TrustVector::Signed(/* std::string::String */)",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\mod.rs",
        "line": "37",
        "column": "22",
        "level": "error",
        "code": "E0308",
        "message": "mismatched types",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "37: evaluation::init(policy_graph)?;\n85: pub fn init(policy_graph: ZtaPolicyGraph) -> Result<(), String> {",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "58",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this enum variant takes 1 argument but 0 arguments were supplied",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "532: Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "75",
        "column": "34",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `TrustViolation` found for \nenum `ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "75: .map_err(|e| ForgeError::TrustViolation(e))?;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "82",
        "column": "36",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `TrustViolation` found for \nenum `ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "82: return Err(ForgeError::TrustViolation(format!(\"Syscall '{}' \nblocked by ZTA policy\", syscall)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "90",
        "column": "17",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallTrace` has no field named `id`",
        "help": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "rust_suggestion": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "code_snippet": "90: id: uuid::Uuid::new_v4(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "91",
        "column": "17",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallTrace` has no field named `syscall_name`",
        "help": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "rust_suggestion": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "code_snippet": "91: syscall_name: syscall.to_string(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "95",
        "column": "17",
        "level": "error",
        "code": "E0560",
        "message": "struct `SyscallTrace` has no field named `result`",
        "help": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "rust_suggestion": "available fields are: `syscall`, `trust_score`, `allowed`, `reason`",
        "code_snippet": "95: result: \"QUARANTINED\".to_string(),",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "100",
        "column": "30",
        "level": "error",
        "code": "E0533",
        "message": "expected value, found struct variant `ForgeError::ExecutionError`",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "100: .map_err(|e| ForgeError::ExecutionError(e))?;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "107",
        "column": "39",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `TrustViolation` found for \nenum `ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "107: ).map_err(|e| ForgeError::TrustViolation(e))?;",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "109",
        "column": "36",
        "level": "error",
        "code": "E0599",
        "message": "no variant or associated item named `TrustViolation` found for \nenum `ForgeError` in the current scope",
        "help": "",
        "rust_suggestion": "",
        "code_snippet": "109: return Err(ForgeError::TrustViolation(format!(\"Process \nquarantined due to syscall '{}' violation\", syscall)));",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\lib.rs",
        "line": "124",
        "column": "5",
        "level": "error",
        "code": "E0061",
        "message": "this function takes 2 arguments but 4 arguments were supplied",
        "help": "`#[warn(unused_variables)]` on by default\n\nwarning: unused variable: `state`\n   --> microkernel\\src\\execution\\wasm.rs:164:13\n    |\n164 |     let mut state = WasmHostState::Running;\n    |             ^^^^^ help: if this is intentional, prefix it with an \nunderscore: `_state`\n\nwarning: variable does not need to be mutable\n   --> microkernel\\src\\execution\\wasm.rs:164:9\n    |\n164 |     let mut state = WasmHostState::Running;\n    |         ----^^^^^\n    |         |\n    |         help: remove this `mut`\n    |",
        "rust_suggestion": "`#[warn(unused_variables)]` on by default\n\nwarning: unused variable: `state`\n   --> microkernel\\src\\execution\\wasm.rs:164:13\n    |\n164 |     let mut state = WasmHostState::Running;\n    |             ^^^^^ help: if this is intentional, prefix it with an \nunderscore: `_state`\n\nwarning: variable does not need to be mutable\n   --> microkernel\\src\\execution\\wasm.rs:164:9\n    |\n164 |     let mut state = WasmHostState::Running;\n    |         ----^^^^^\n    |         |\n    |         help: remove this `mut`\n    |",
        "code_snippet": "124: execution::syscall::execute_syscall(syscall, args, identity, &mut \nspan)\n170: fn execute_syscall(syscall: &str, args: &[&str]) -> Result<()> {\n249: let runtime_context = get_runtime_context()?;\n164: let mut state = WasmHostState::Running;\n164: let mut state = WasmHostState::Running;\n199: fn execute_file_open(args: &[&str]) -> Result<()> {\n204: fn execute_file_read(args: &[&str]) -> Result<()> {\n209: fn execute_file_write(args: &[&str]) -> Result<()> {\n214: fn execute_file_close(args: &[&str]) -> Result<()> {\n219: fn execute_net_connect(args: &[&str]) -> Result<()> {\n224: fn execute_net_send(args: &[&str]) -> Result<()> {\n229: fn execute_net_recv(args: &[&str]) -> Result<()> {\n234: fn execute_net_close(args: &[&str]) -> Result<()> {\n239: fn execute_proc_create(args: &[&str]) -> Result<()> {\n244: fn execute_proc_kill(args: &[&str]) -> Result<()> {\n249: fn execute_mem_alloc(args: &[&str]) -> Result<()> {\n254: fn execute_mem_free(args: &[&str]) -> Result<()> {\n259: fn execute_ipc_send(args: &[&str]) -> Result<()> {\n264: fn execute_ipc_recv(args: &[&str]) -> Result<()> {\n269: fn execute_time_get(args: &[&str]) -> Result<()> {\n274: fn execute_time_sleep(args: &[&str]) -> Result<()> {\n279: fn execute_crypto_hash(args: &[&str]) -> Result<()> {\n284: fn execute_crypto_sign(args: &[&str]) -> Result<()> {\n289: fn execute_crypto_verify(args: &[&str]) -> Result<()> {\n294: fn execute_sys_info(args: &[&str]) -> Result<()> {\n315: fn calculate_behavioral_score(&self, context_id: Uuid) -> f64 {\n322: fn calculate_environmental_score(&self, context_id: Uuid) -> f64 {\n329: fn calculate_policy_adjustments(&self, context_id: Uuid) -> f64 {\n386: let context = self.get_context(context_id)?;\n383: trust_score: f64,",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "46",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "49",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "52",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "57",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "60",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "63",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "69",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "72",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      },
      {
        "file": "microkernel\\src\\trust\\zta_policy.rs",
        "line": "177",
        "column": "75",
        "level": "error",
        "code": "Unknown",
        "message": "unknown character escape: `.`",
        "help": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "rust_suggestion": "for more information, visit \n<https://doc.rust-lang.org/reference/tokens.html#literals>\nhelp: if you meant to write a literal backslash (perhaps escaping in a regular \nexpression), consider a raw string literal\n    |\n177 |             constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n    |                                   +",
        "code_snippet": "177: constraints.insert(0, \n\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network\n177: constraints.insert(0, \nr\"^((?!(127\\.0\\.0\\.1|0\\.0\\.0\\.0|10\\.0\\.0\\.0/8)).)*$\".to_string()); // Restrict \nlocal network",
        "ai_suggestion": "AI suggestion unavailable. Check your Gemini API key."
      }
    ]
  }
}